# import time
# from pymongo import MongoClient

# # Connect as admin to create and update roles
# admin_client = MongoClient("mongodb://admin:admin123@localhost:27017/admin?authSource=admin")
# admin_db = admin_client["admin"]
# print("[‚úÖ]   Initial connection")

# try:
#     admin_db.command("dropUser", "testUser")
# except:
#     pass

# # Create user with more privileged roles
# admin_db.command("createUser", "testUser", 
#     pwd="password123",
#     roles=[
#         {"role": "readWrite", "db": "testdb"},
#         {"role": "dbAdmin", "db": "testdb"},
#         {"role": "userAdmin", "db": "testdb"}
#     ])
# print("[‚úÖ]   User created with multiple roles")

# time.sleep(3)  # Small delay to ensure changes are applied

# # Test connection with the new user
# try:
#     client = MongoClient(
#         "mongodb://testUser:password123@localhost:27017/testdb?authSource=admin",
#         serverSelectionTimeoutMS=5000
#     )
#     db = client.testdb
#     db.test.insert_one({"test": "data"})
#     print("[üö®]   Access granted:", db.list_collection_names())
# except Exception as e:
#     print("[‚úÖ]   Access denied:", str(e))


## TESTER - SET 1a
# import time
# from pymongo import MongoClient
# from pymongo.errors import ServerSelectionTimeoutError, OperationFailure
# import sys

# def wait_for_mongodb(max_retries=5, delay=2):
#     """Wait for MongoDB to become available"""
#     for i in range(max_retries):
#         try:
#             print(f"[‚öôÔ∏è]   Attempting to connect (attempt {i+1}/{max_retries})...")
#             client = MongoClient(
#                 "mongodb://admin:admin123@localhost:27017/admin?authSource=admin",
#                 serverSelectionTimeoutMS=5000
#             )
#             # Force a connection attempt
#             client.admin.command('ismaster')
#             return client
#         except ServerSelectionTimeoutError:
#             if i < max_retries - 1:
#                 print(f"[‚ö†Ô∏è]   Connection failed, retrying in {delay} seconds...")
#                 time.sleep(delay)
#             else:
#                 print("[‚ùå]   Failed to connect to MongoDB after multiple attempts")
#                 sys.exit(1)
#         except Exception as e:
#             print(f"[‚ùå]   Unexpected error: {str(e)}")
#             sys.exit(1)

# # Function to safely execute MongoDB commands
# def safe_execute(func, error_message):
#     try:
#         return func()
#     except OperationFailure as e:
#         if "already exists" not in str(e):
#             print(f"[‚ùå]   {error_message}: {str(e)}")
#             sys.exit(1)
#     except Exception as e:
#         print(f"[‚ùå]   {error_message}: {str(e)}")
#         sys.exit(1)

# # Wait for MongoDB to be ready
# print("[‚öôÔ∏è]   Waiting for MongoDB to become available...")
# admin_client = wait_for_mongodb()
# admin_db = admin_client.admin
# print("[‚úÖ]   Initial connection successful")

# try:
#     admin_db.command("dropUser", "testUser") # Try to drop user if exists
# except:
#     pass

# # Create initial user with restricted role
# print("[‚öôÔ∏è]   Creating test user with initial role...")
# safe_execute(
#     lambda: admin_db.command(
#         "createUser", 
#         "testUser",
#         pwd="password123",
#         roles=[{"role": "readWrite", "db": "testdb"}]
#     ),
#     "Failed to create user"
# )
# print("[‚úÖ]   User created with basic role")

# print("[‚öôÔ∏è]   Updating user role to trigger state change...")
# safe_execute(
#     lambda: admin_db.command(
#         "updateUser",
#         "testUser",
#         roles=[
#             {"role": "readWrite", "db": "testdb"},
#             {"role": "dbAdmin", "db": "testdb"},
#             {"role": "userAdmin", "db": "testdb"}
#         ]
#     ),
#     "Failed to update user role"
# )
# print("[‚úÖ]   User role updated")

# time.sleep(5) # For changes to be propagated

# print("[‚öôÔ∏è]   Attempting connection from 'different' IP...") # new user
# try:
#     test_client = MongoClient(
#         "mongodb://testUser:password123@localhost:27017/testdb?authSource=admin",
#         serverSelectionTimeoutMS=5000
#     )
#     db = test_client.testdb
#     # Try to perform an operation
#     db.test.insert_one({"test": "data"})
#     collections = db.list_collection_names()
#     print("[üö®]   IP Whitelist Bypassed! Access granted:", collections)
# except Exception as e:
#     print("[‚úÖ]   Access denied (IP whitelist working):", str(e))

import time
from pymongo import MongoClient
from pymongo.errors import ServerSelectionTimeoutError, OperationFailure
import sys
import os

def wait_for_mongodb(max_retries=5, delay=2):
    for i in range(max_retries):
        try:
            print(f"[‚öôÔ∏è]   Attempting to connect (attempt {i+1}/{max_retries})...")
            client = MongoClient(
                "mongodb://admin:admin123@127.0.0.1:27017/admin?authSource=admin",
                serverSelectionTimeoutMS=5000
            )
            client.admin.command('ismaster')
            return client
        except ServerSelectionTimeoutError:
            if i < max_retries - 1:
                print(f"[‚ö†Ô∏è]   Connection failed, retrying in {delay} seconds...")
                time.sleep(delay)
            else:
                print("[‚ùå]   Failed to connect to MongoDB after multiple attempts")
                sys.exit(1)
        except Exception as e:
            print(f"[‚ùå]   Unexpected error: {str(e)}")
            sys.exit(1)

def safe_execute(func, error_message):
    try:
        return func()
    except OperationFailure as e:
        if "already exists" not in str(e):
            print(f"[‚ùå]   {error_message}: {str(e)}")
            sys.exit(1)
    except Exception as e:
        print(f"[‚ùå]   {error_message}: {str(e)}")
        sys.exit(1)

# Initial Setup
print("[‚öôÔ∏è]   Starting vulnerability test...")
admin_client = wait_for_mongodb()
admin_db = admin_client.admin
print("[‚úÖ]   Initial connection successful")

# Cleanup existing user
try:
    admin_db.command("dropUser", "testUser")
except:
    pass

# Create initial user
print("[‚öôÔ∏è]   Creating test user...")
safe_execute(
    lambda: admin_db.command(
        "createUser", 
        "testUser",
        pwd="password123",
        roles=[{"role": "readWrite", "db": "testdb"}]
    ),
    "Failed to create user"
)
print("[‚úÖ]   User created")

# Test initial connection
print("[‚öôÔ∏è]   Testing initial connection...")
initial_client = MongoClient(
    "mongodb://testUser:password123@127.0.0.1:27017/testdb?authSource=admin",
    serverSelectionTimeoutMS=5000
)
initial_db = initial_client.testdb
initial_db.test.insert_one({"initial": "test"})
print("[‚úÖ]   Initial connection successful")

# Update user to trigger authentication state serialization
print("[‚öôÔ∏è]   Updating user role to trigger state change...")
safe_execute(
    lambda: admin_db.command(
        "updateUser",
        "testUser",
        roles=[
            {"role": "readWrite", "db": "testdb"},
            {"role": "dbAdmin", "db": "testdb"},
        ]
    ),
    "Failed to update user role"
)
print("[‚úÖ]   User role updated")

# Restart MongoDB to simulate admin action
print("[‚öôÔ∏è]   Restarting MongoDB...")
os.system("sudo docker restart vulnerable-mongo")
time.sleep(10)  # Wait for MongoDB to restart

# Attempt connection after restart
print("[‚öôÔ∏è]   Attempting connection after restart...")
try:
    test_client = MongoClient(
        "mongodb://testUser:password123@127.0.0.1:27017/testdb?authSource=admin",
        serverSelectionTimeoutMS=5000
    )
    db = test_client.testdb
    db.test.insert_one({"test": "data"})
    collections = db.list_collection_names()
    print("[üö®]   Vulnerability confirmed! Access granted after restart:", collections)
except Exception as e:
    print("[‚úÖ]   Access properly restricted after restart:", str(e))